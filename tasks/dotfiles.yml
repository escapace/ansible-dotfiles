- include_tasks: dependencies.yml

- name: ensure {{ dotfiles_username }} group is present
  group: name={{ dotfiles_username }} state=present

- name: ensure {{ dotfiles_username }} user is present
  user: name={{ dotfiles_username }} shell=/bin/zsh  group={{ dotfiles_username }}

- name: set authorized key
  authorized_key:
    user: "{{ dotfiles_username }}"
    state: present
    key: "{{ dotfiles_key }}"
  when: not((dotfiles_key is undefined) or (dotfiles_key is none) or (dotfiles_key | trim | length == 0))

- name: check groups
  shell: |
    set -o pipefail
    /usr/bin/getent group | awk -F":" '{print $1}'
  args:
    executable: /bin/bash
  register: dotfiles_etc_groups
  changed_when: false

- name: add secondary groups
  user: name={{ dotfiles_username }} groups={{ item }} append=yes
  when: item in dotfiles_etc_groups.stdout_lines
  with_items:
    - mail
    - sudo
    - wheel
    - vboxusers
    - admin
    - docker

- name: ensure keyboard interactive group is present
  group: name={{ dotfiles_keyboard_interactive_group }} system=true state=present
  when: not(
    (dotfiles_keyboard_interactive_group is undefined) or
    (dotfiles_keyboard_interactive_group is none) or
    (dotfiles_keyboard_interactive_group | trim | length == 0))

- name: add keyboard interactive group
  user: name={{ dotfiles_username }} groups={{ dotfiles_keyboard_interactive_group }} append=yes
  when: not((dotfiles_keyboard_interactive_group is undefined) or
    (dotfiles_keyboard_interactive_group is none) or
    (dotfiles_keyboard_interactive_group | trim | length == 0))

- name: Allow {{ dotfiles_username }} to have passwordless sudo
  lineinfile:
    dest: /etc/sudoers.d/dotfiles
    mode: 0640
    create: yes
    state: present
    regexp: '^{{ dotfiles_username }}'
    line: '{{ dotfiles_username }} ALL=(ALL) NOPASSWD: ALL'

- name: create directories
  file:
    path: "{{ item }}"
    owner: "{{ dotfiles_username }}"
    group: "{{ dotfiles_username }}"
    state: directory
    mode: 0750
  with_items:
    - "/home/{{ dotfiles_username }}/.local"
    - "/home/{{ dotfiles_username }}/.local/bin"

- name: clone repository
  git: repo={{ dotfiles_repo }}
       dest={{ dotfiles_directory }}
       recursive=yes
       version={{ dotfiles_version }}
       umask=027
       update=no
       depth=1
  become: true
  become_user: "{{ dotfiles_username }}"

- name: clone vim repository
  git: repo={{ dotfiles_vim_repo }}
       dest={{ dotfiles_vim_directory }}
       recursive=yes
       umask=027
       update=no
       depth=1
  become: true
  become_user: "{{ dotfiles_username }}"


- name: check if nvim exists
  stat:
    path: "/home/{{ dotfiles_username }}/.local/bin/nvim"
  register: dotfiles_stat_nvim

- name: download nvim appimage
  get_url:
    owner: "{{ dotfiles_username }}"
    group: "{{ dotfiles_username }}"
    validate_certs: yes
    url: "{{ dotfiles_nvim_appimage }}"
    dest: "/home/{{ dotfiles_username }}/.local/bin/nvim"
    mode: 0750
  when: not dotfiles_stat_nvim.stat.exists | bool

- name: check if ~/.pyenv exists
  stat:
    path: "/home/{{ dotfiles_username }}/.pyenv"
  register: dotfiles_stat_pyenv

- name: check if ~/.gvm exists
  stat:
    path: "/home/{{ dotfiles_username }}/.gvm"
  register: dotfiles_stat_gvm

- name: create temporary directory
  file:
    path: "{{ dotfiles_tmp_directory }}"
    owner: "{{ dotfiles_username }}"
    group: "{{ dotfiles_username }}"
    state: directory
    mode: 0700
  when: not ((dotfiles_stat_pyenv.stat.exists | bool) and (dotfiles_stat_gvm.stat.exists | bool))

- name: download pyenv installer
  get_url:
    owner: "{{ dotfiles_username }}"
    group: "{{ dotfiles_username }}"
    validate_certs: yes
    url: "{{ dotfiles_pyenv_installer }}"
    dest: "{{ dotfiles_tmp_directory }}/pyenv-installer"
    mode: 0700
  when: not dotfiles_stat_pyenv.stat.exists | bool

- name: install pyenv
  shell: bash "{{ dotfiles_tmp_directory }}/pyenv-installer"
  become: true
  become_user: "{{ dotfiles_username }}"
  args:
    chdir: "{{ dotfiles_directory }}"
    warn: false
    creates: "/home/{{ dotfiles_username }}/.pyenv"
  when: not dotfiles_stat_pyenv.stat.exists | bool

- name: download gvm installer
  get_url:
    owner: "{{ dotfiles_username }}"
    group: "{{ dotfiles_username }}"
    validate_certs: yes
    url: "{{ dotfiles_gvm_installer }}"
    dest: "{{ dotfiles_tmp_directory }}/gvm-installer"
    mode: 0700
  when: not dotfiles_stat_gvm.stat.exists | bool

- name: install gvm
  shell: bash "{{ dotfiles_tmp_directory }}/gvm-installer"
  become: true
  become_user: "{{ dotfiles_username }}"
  args:
    chdir: "{{ dotfiles_directory }}"
    warn: false
    creates: "/home/{{ dotfiles_username }}/.gvm"
  when: not dotfiles_stat_gvm.stat.exists | bool

- name: remove temporary directory
  file:
    path: "{{ dotfiles_tmp_directory }}"
    state: absent

- name: clone nodenv repository
  git: repo={{ dotfiles_nodenv_repo }}
       dest={{ dotfiles_nodenv_directory }}
       recursive=yes
       umask=027
       update=no
       version={{ dotfiles_nodenv_version }}
  become: true
  become_user: "{{ dotfiles_username }}"

- name: clone rbenv repository
  git: repo={{ dotfiles_rbenv_repo }}
       dest={{ dotfiles_rbenv_directory }}
       recursive=yes
       umask=027
       update=no
  become: true
  become_user: "{{ dotfiles_username }}"

- name: clone ruby build repository
  git: repo={{ dotfiles_rbenv_build_repo }}
       dest={{ dotfiles_rbenv_build_directory }}
       recursive=yes
       umask=027
       update=no
  become: true
  become_user: "{{ dotfiles_username }}"

- name: install dotfiles
  shell: "./manage install"
  become: true
  become_user: "{{ dotfiles_username }}"
  args:
    chdir: "{{ dotfiles_directory }}"
    warn: false
    creates: "/home/{{ dotfiles_username }}/.zpreztorc"

- name: link .vimrc
  file:
    src: "{{ dotfiles_vim_directory }}/vimrc"
    dest: "/home/{{ dotfiles_username }}/.vimrc"
    owner: "{{ dotfiles_username }}"
    group: "{{ dotfiles_username }}"
    state: link

- name: link .zshrc
  file:
    src: "{{ dotfiles_directory }}/zsh/runcoms/zshrc"
    dest: "/home/{{ dotfiles_username }}/.zshrc"
    owner: "{{ dotfiles_username }}"
    group: "{{ dotfiles_username }}"
    state: link
    force: true

- name: install vim dotfiles
  shell: "sudo -i -u {{ dotfiles_username }} bash -c \"cd ~/.vim && ./manage install\""
  become: true
  become_user: "{{ dotfiles_username }}"
  args:
    executable: /usr/bin/zsh
    chdir: "{{ dotfiles_vim_directory }}"
    warn: false
    creates: "{{ dotfiles_vim_directory }}/.ready"

- name: touch .vimrc
  file:
    path: "{{ dotfiles_vim_directory }}/vimrc"
    owner: "{{ dotfiles_username }}"
    group: "{{ dotfiles_username }}"
    mode: 0640
    state: touch
  changed_when: false

