---
- ansible.builtin.include_tasks: dependencies.yml

- name: ensure {{ dotfiles_username }} group is present
  ansible.builtin.group:
    name: "{{ dotfiles_username }}"
    state: present

- name: ensure {{ dotfiles_username }} user is present
  ansible.builtin.user:
    name: "{{ dotfiles_username }}"
    shell: /bin/fish
    group: "{{ dotfiles_username }}"

- name: set authorized key
  ansible.posix.authorized_key:
    user: "{{ dotfiles_username }}"
    state: present
    key: "{{ dotfiles_key }}"
  when: not((dotfiles_key is undefined) or (dotfiles_key is none) or (dotfiles_key | trim | length == 0))

- name: check groups
  ansible.builtin.shell: |
    set -o pipefail
    /usr/bin/getent group | awk -F":" '{print $1}'
  args:
    executable: /bin/bash
  register: dotfiles_etc_groups
  changed_when: false

- name: add secondary groups
  ansible.builtin.user:
    name: "{{ dotfiles_username }}"
    groups: "{{ item }}"
    append: true
  when: item in dotfiles_etc_groups.stdout_lines
  with_items:
    - mail
    - sudo
    - wheel
    - vboxusers
    - admin
    - docker

- name: ensure keyboard interactive group is present
  ansible.builtin.group:
    name: "{{ dotfiles_keyboard_interactive_group }}"
    system: true
    state: present
  when:
    not( (dotfiles_keyboard_interactive_group is undefined) or (dotfiles_keyboard_interactive_group is none) or (dotfiles_keyboard_interactive_group | trim |
    length == 0))

- name: add to keyboard interactive group
  ansible.builtin.user:
    name: "{{ dotfiles_username }}"
    groups: "{{ dotfiles_keyboard_interactive_group }}"
    append: true
  when:
    not((dotfiles_keyboard_interactive_group is undefined) or (dotfiles_keyboard_interactive_group is none) or (dotfiles_keyboard_interactive_group | trim | length
    == 0))

- name: Allow {{ dotfiles_username }} to have passwordless sudo
  ansible.builtin.lineinfile:
    dest: /etc/sudoers.d/dotfiles
    mode: "0640"
    create: true
    state: present
    regexp: ^{{ dotfiles_username }}
    line: "{{ dotfiles_username }} ALL=(ALL) NOPASSWD: ALL"

- name: create directories
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ dotfiles_username }}"
    group: "{{ dotfiles_username }}"
    state: directory
    mode: "0750"
  with_items:
    - /home/{{ dotfiles_username }}/.local
    - /home/{{ dotfiles_username }}/.local/bin

- name: clone repository
  ansible.builtin.git:
    repo: "{{ dotfiles_repo }}"
    dest: "{{ dotfiles_directory }}"
    recursive: true
    version: "{{ dotfiles_version }}"
    umask: "0027"
    update: false
    depth: "{{ omit if dotfiles_git_depth == 0 else dotfiles_git_depth }}"
  become: true
  become_user: "{{ dotfiles_username }}"

- name: clone vim repository
  ansible.builtin.git:
    repo: "{{ dotfiles_vim_repo }}"
    dest: "{{ dotfiles_vim_directory }}"
    recursive: true
    umask: "0027"
    update: false
    depth: "{{ omit if dotfiles_git_depth == 0 else dotfiles_git_depth }}"
  become: true
  become_user: "{{ dotfiles_username }}"

- name: install vim
  ansible.builtin.package:
    name: vim
  when: ansible_architecture == "aarch64"

- name: check if ~/.rye exists
  ansible.builtin.stat:
    path: /home/{{ dotfiles_username }}/.rye
  register: dotfiles_stat_rye
  when: (dotfiles_rye_install | bool) or (dotfiles_rustup_install | bool)

- name: check if ~/.rustup exists
  ansible.builtin.stat:
    path: /home/{{ dotfiles_username }}/.rustup
  register: dotfiles_stat_rustup
  when: (dotfiles_rustup_install | bool) or (dotfiles_rustup_install | bool)

- name: create temporary directory
  ansible.builtin.file:
    path: "{{ dotfiles_tmp_directory }}"
    owner: "{{ dotfiles_username }}"
    group: "{{ dotfiles_username }}"
    state: directory
    mode: "0700"
  when: (dotfiles_rye_install | bool and not dotfiles_stat_rye.stat.exists | bool) or (dotfiles_rustup_install | bool and not dotfiles_stat_rustup.stat.exists | bool)

- name: download rye installer
  ansible.builtin.get_url:
    owner: "{{ dotfiles_username }}"
    group: "{{ dotfiles_username }}"
    validate_certs: true
    url: "{{ dotfiles_rye_installer }}"
    dest: "{{ dotfiles_tmp_directory }}/rye-installer"
    mode: "0700"
  when: dotfiles_rye_install | bool and not dotfiles_stat_rye.stat.exists | bool

- name: install rye
  ansible.builtin.shell: bash "{{ dotfiles_tmp_directory }}/rye-installer"
  become: true
  become_user: "{{ dotfiles_username }}"
  environment:
    RYE_INSTALL_OPTION: "--yes --no-modify-path"
  args:
    chdir: "{{ dotfiles_directory }}"
    creates: /home/{{ dotfiles_username }}/.rye
  when: dotfiles_rye_install | bool and not dotfiles_stat_rye.stat.exists | bool

- name: download rustup installer
  ansible.builtin.get_url:
    owner: "{{ dotfiles_username }}"
    group: "{{ dotfiles_username }}"
    validate_certs: true
    url: "{{ dotfiles_rustup_installer }}"
    dest: "{{ dotfiles_tmp_directory }}/rustup-installer"
    mode: "0700"
  when: dotfiles_rustup_install | bool and not dotfiles_stat_rustup.stat.exists | bool

- name: install rustup
  ansible.builtin.shell: sh "{{ dotfiles_tmp_directory }}/rustup-installer" "-y" "--no-modify-path"
  become: true
  become_user: "{{ dotfiles_username }}"
  args:
    chdir: "{{ dotfiles_directory }}"
    creates: /home/{{ dotfiles_username }}/.rustup
  when: dotfiles_rustup_install | bool and not dotfiles_stat_rustup.stat.exists | bool

- name: remove temporary directory
  ansible.builtin.file:
    path: "{{ dotfiles_tmp_directory }}"
    state: absent

- name: clone nodenv repository
  ansible.builtin.git:
    repo: "{{ dotfiles_nodenv_repo }}"
    dest: "{{ dotfiles_nodenv_directory }}"
    recursive: true
    umask: "0027"
    update: false
    version: "{{ dotfiles_nodenv_version }}"
  become: true
  become_user: "{{ dotfiles_username }}"
  when: dotfiles_nodenv_install | bool

- name: clone nodenv build repository
  ansible.builtin.git:
    repo: "{{ dotfiles_nodenv_build_repo }}"
    dest: "{{ dotfiles_nodenv_build_directory }}"
    recursive: true
    umask: "0027"
    update: false
    version: "{{ dotfiles_nodenv_build_version }}"
  become: true
  become_user: "{{ dotfiles_username }}"
  when: dotfiles_nodenv_install | bool

- name: install dotfiles
  ansible.builtin.shell: ./manage install
  become: true
  become_user: "{{ dotfiles_username }}"
  args:
    chdir: "{{ dotfiles_directory }}"
    creates: /home/{{ dotfiles_username }}/.config/fish/config.fish

- name: install vim dotfiles
  ansible.builtin.shell: sudo -i -u {{ dotfiles_username }} bash -c "cd ~/.vim && ./manage install"
  become: true
  become_user: "{{ dotfiles_username }}"
  args:
    executable: /usr/bin/bash
    chdir: "{{ dotfiles_vim_directory }}"
  tags:
    - molecule-idempotence-notest

- name: touch .vimrc
  ansible.builtin.file:
    path: "{{ dotfiles_vim_directory }}/vimrc"
    owner: "{{ dotfiles_username }}"
    group: "{{ dotfiles_username }}"
    mode: "0640"
    state: touch
  changed_when: false
  become: true
  become_user: "{{ dotfiles_username }}"
