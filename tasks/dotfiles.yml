---

- include_tasks: dependencies.yml

- name: ensure {{ dotfiles_username }} group is present
  ansible.builtin.group: name={{ dotfiles_username }} state=present

- name: ensure {{ dotfiles_username }} user is present
  ansible.builtin.user: name={{ dotfiles_username }} shell=/bin/fish  group={{ dotfiles_username }}

- name: set authorized key
  ansible.posix.authorized_key:
    user: "{{ dotfiles_username }}"
    state: present
    key: "{{ dotfiles_key }}"
  when: not((dotfiles_key is undefined) or (dotfiles_key is none) or (dotfiles_key | trim | length == 0))

- name: check groups
  ansible.builtin.shell: |
    set -o pipefail
    /usr/bin/getent group | awk -F":" '{print $1}'
  args:
    executable: /bin/bash
  register: dotfiles_etc_groups
  changed_when: false

- name: add secondary groups
  ansible.builtin.user: name={{ dotfiles_username }} groups={{ item }} append=yes
  when: item in dotfiles_etc_groups.stdout_lines
  with_items:
    - mail
    - sudo
    - wheel
    - vboxusers
    - admin
    - docker

- name: ensure keyboard interactive group is present
  ansible.builtin.group: name={{ dotfiles_keyboard_interactive_group }} system=true state=present
  when: not(
    (dotfiles_keyboard_interactive_group is undefined) or
    (dotfiles_keyboard_interactive_group is none) or
    (dotfiles_keyboard_interactive_group | trim | length == 0))

- name: add keyboard interactive group
  ansible.builtin.user: name={{ dotfiles_username }} groups={{ dotfiles_keyboard_interactive_group }} append=yes
  when: not((dotfiles_keyboard_interactive_group is undefined) or
    (dotfiles_keyboard_interactive_group is none) or
    (dotfiles_keyboard_interactive_group | trim | length == 0))

- name: Allow {{ dotfiles_username }} to have passwordless sudo
  ansible.builtin.lineinfile:
    dest: /etc/sudoers.d/dotfiles
    mode: 0640
    create: true
    state: present
    regexp: '^{{ dotfiles_username }}'
    line: '{{ dotfiles_username }} ALL=(ALL) NOPASSWD: ALL'

- name: create directories
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ dotfiles_username }}"
    group: "{{ dotfiles_username }}"
    state: directory
    mode: 0750
  with_items:
    - "/home/{{ dotfiles_username }}/.local"
    - "/home/{{ dotfiles_username }}/.local/bin"

- name: clone repository
  ansible.builtin.git: repo={{ dotfiles_repo }}
       dest={{ dotfiles_directory }}
       recursive=true
       version={{ dotfiles_version }}
       umask=027
       update=no
       depth=1
  become: true
  become_user: "{{ dotfiles_username }}"

- name: clone vim repository
  ansible.builtin.git: repo={{ dotfiles_vim_repo }}
       dest={{ dotfiles_vim_directory }}
       recursive=true
       umask=027
       update=no
       depth=1
  become: true
  become_user: "{{ dotfiles_username }}"

- name: install vim
  ansible.builtin.package:
    name: "vim"
  when: ansible_architecture == "aarch64"

- name: check if ~/.pyenv exists
  ansible.builtin.stat:
    path: "/home/{{ dotfiles_username }}/.pyenv"
  register: dotfiles_stat_pyenv

- name: create temporary directory
  ansible.builtin.file:
    path: "{{ dotfiles_tmp_directory }}"
    owner: "{{ dotfiles_username }}"
    group: "{{ dotfiles_username }}"
    state: directory
    mode: 0700
  when: not dotfiles_stat_pyenv.stat.exists | bool

- name: download pyenv installer
  ansible.builtin.get_url:
    owner: "{{ dotfiles_username }}"
    group: "{{ dotfiles_username }}"
    validate_certs: true
    url: "{{ dotfiles_pyenv_installer }}"
    dest: "{{ dotfiles_tmp_directory }}/pyenv-installer"
    mode: 0700
  when: not dotfiles_stat_pyenv.stat.exists | bool

- name: install pyenv
  ansible.builtin.shell: bash "{{ dotfiles_tmp_directory }}/pyenv-installer"
  become: true
  become_user: "{{ dotfiles_username }}"
  args:
    chdir: "{{ dotfiles_directory }}"
    warn: false
    creates: "/home/{{ dotfiles_username }}/.pyenv"
  when: not dotfiles_stat_pyenv.stat.exists | bool

- name: remove temporary directory
  ansible.builtin.file:
    path: "{{ dotfiles_tmp_directory }}"
    state: absent

- name: clone nodenv repository
  ansible.builtin.git: repo={{ dotfiles_nodenv_repo }}
       dest={{ dotfiles_nodenv_directory }}
       recursive=true
       umask=027
       update=no
       version={{ dotfiles_nodenv_version }}
  become: true
  become_user: "{{ dotfiles_username }}"

- name: clone nodenv build repository
  ansible.builtin.git: repo={{ dotfiles_nodenv_build_repo }}
       dest={{ dotfiles_nodenv_build_directory }}
       recursive=true
       umask=027
       update=no
       version={{ dotfiles_nodenv_build_version }}
  become: true
  become_user: "{{ dotfiles_username }}"

- name: clone rbenv repository
  ansible.builtin.git: repo={{ dotfiles_rbenv_repo }}
       dest={{ dotfiles_rbenv_directory }}
       recursive=true
       umask=027
       update=no
  become: true
  become_user: "{{ dotfiles_username }}"
  when: dotfiles_rbenv_install | bool

- name: clone ruby build repository
  ansible.builtin.git: repo={{ dotfiles_rbenv_build_repo }}
       dest={{ dotfiles_rbenv_build_directory }}
       recursive=true
       umask=027
       update=no
  become: true
  become_user: "{{ dotfiles_username }}"
  when: dotfiles_rbenv_install | bool

- name: install dotfiles
  ansible.builtin.shell: "./manage install"
  become: true
  become_user: "{{ dotfiles_username }}"
  args:
    chdir: "{{ dotfiles_directory }}"
    warn: false
    creates: "/home/{{ dotfiles_username }}/.config/fish/config.fish"

- name: install vim dotfiles
  ansible.builtin.shell: "sudo -i -u {{ dotfiles_username }} bash -c \"cd ~/.vim && ./manage install\""
  become: true
  become_user: "{{ dotfiles_username }}"
  args:
    executable: /usr/bin/bash
    chdir: "{{ dotfiles_vim_directory }}"
    warn: false
    creates: "{{ dotfiles_vim_directory }}/.ready"

- name: touch .vimrc
  ansible.builtin.file:
    path: "{{ dotfiles_vim_directory }}/vimrc"
    owner: "{{ dotfiles_username }}"
    group: "{{ dotfiles_username }}"
    mode: 0640
    state: touch
  changed_when: false
  become: true
  become_user: "{{ dotfiles_username }}"
